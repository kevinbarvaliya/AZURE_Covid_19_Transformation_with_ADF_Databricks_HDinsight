{
	"name": "df_transform_population",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_population_raw",
						"type": "DatasetReference"
					},
					"name": "SourcePopulation"
				},
				{
					"dataset": {
						"referenceName": "ds_country_looup",
						"type": "DatasetReference"
					},
					"name": "SourceCountryLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_population",
						"type": "DatasetReference"
					},
					"name": "Sinkpopulation"
				}
			],
			"transformations": [
				{
					"name": "DerivedCountryCode"
				},
				{
					"name": "JoinCountryCode"
				},
				{
					"name": "SelectRequiredFields"
				},
				{
					"name": "PivoteByAgeGroup"
				},
				{
					"name": "SelectSinkFields"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {indic_de,geo\\time} as string,",
				"          {2008 } as string,",
				"          {2009 } as string,",
				"          {2010 } as string,",
				"          {2011 } as string,",
				"          {2012 } as string,",
				"          {2013 } as string,",
				"          {2014 } as string,",
				"          {2015 } as string,",
				"          {2016 } as string,",
				"          {2017 } as string,",
				"          {2018 } as string,",
				"          {2019 } as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourcePopulation",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceCountryLookup",
				"SourcePopulation derive(age_group = \r",
				"\r",
				"\r",
				"substringIndex(replace({indic_de,geo\\time}, \"PC_\", \"\"), \",\", 1),",
				"          country_code = substring(substringIndex(replace({indic_de,geo\\time}, \"PC_\", \"\"), \",\", -1)\r",
				", 1, 2),",
				"          percentage_2019 = regexReplace({2019 },  ':|[a-z]', '')) ~> DerivedCountryCode",
				"DerivedCountryCode, SourceCountryLookup join(country_code == country_code_2_digit,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinCountryCode",
				"JoinCountryCode select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          age_group,",
				"          percentage_2019",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRequiredFields",
				"SelectRequiredFields pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population),",
				"     pivotBy(age_group, ['PC_Y0_14', 'Y15_24', 'Y25_49', 'Y50_64', 'Y65_79', 'Y80_MAX']),",
				"     group = sum(toDouble(percentage_2019))\r",
				",",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> PivoteByAgeGroup",
				"PivoteByAgeGroup select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          age_group_0_14 = PC_Y0_14_group,",
				"          age_group_15_24 = Y15_24_group,",
				"          age_group_25_49 = Y25_49_group,",
				"          age_group_50_64 = Y50_64_group,",
				"          age_group_65_79 = Y65_79_group,",
				"          age_group_80_MAX = Y80_MAX_group",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectSinkFields",
				"SelectSinkFields sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Sinkpopulation"
			]
		}
	}
}