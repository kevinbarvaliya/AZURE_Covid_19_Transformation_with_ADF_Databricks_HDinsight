{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Covid-19-ADF-7132"
		},
		"tr_ingest_population_data_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/b70114fd-1f01-4ae0-a331-3350a98201f0/resourceGroups/Covid-19-project/providers/Microsoft.Storage/storageAccounts/covid19storagaccount7132"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/df_transform_hospital_admission_data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_raw_hospilat_admission",
								"type": "DatasetReference"
							},
							"name": "HospitalAdmissionDataSource"
						},
						{
							"dataset": {
								"referenceName": "ds_country_looup",
								"type": "DatasetReference"
							},
							"name": "CountryLookup"
						},
						{
							"dataset": {
								"referenceName": "ds_date_lookup",
								"type": "DatasetReference"
							},
							"name": "DateLoopup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_processed_hospital_admission_weekly",
								"type": "DatasetReference"
							},
							"name": "SinkWeeklyData"
						},
						{
							"dataset": {
								"referenceName": "ds_processed_hospital_admission_daily",
								"type": "DatasetReference"
							},
							"name": "SinkDailyData"
						}
					],
					"transformations": [
						{
							"name": "ContryCodeLookup"
						},
						{
							"name": "SelectRequiresField"
						},
						{
							"name": "SplitDailyDataFromWeekly"
						},
						{
							"name": "AggregateDimDaate"
						},
						{
							"name": "JoinWithDate"
						},
						{
							"name": "PivoteWeeklyCount"
						},
						{
							"name": "PivoteDayCount"
						},
						{
							"name": "SortWeekly"
						},
						{
							"name": "SortDaily"
						},
						{
							"name": "SelectWeeklyRequiredFiled"
						},
						{
							"name": "SelectDailyRequiredFiled"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          indicator as string,",
						"          date as date,",
						"          year_week as string,",
						"          value as double,",
						"          source as string,",
						"          url as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> HospitalAdmissionDataSource",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CountryLookup",
						"source(output(",
						"          date_key as string,",
						"          date as string,",
						"          year as string,",
						"          month as string,",
						"          day as string,",
						"          day_name as string,",
						"          day_of_year as string,",
						"          week_of_month as string,",
						"          week_of_year as string,",
						"          month_name as string,",
						"          year_month as string,",
						"          year_week as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DateLoopup",
						"HospitalAdmissionDataSource, CountryLookup lookup(HospitalAdmissionDataSource@country == CountryLookup@country,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ContryCodeLookup",
						"ContryCodeLookup select(mapColumn(",
						"          country = HospitalAdmissionDataSource@country,",
						"          indicator,",
						"          reported_date = date,",
						"          reported_year_week = year_week,",
						"          value,",
						"          source,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRequiresField",
						"SelectRequiresField split(indicator == \"Weekly new hospital admissions per 100k\" || indicator == \"Weekly new ICU admissions per 100k\",",
						"     disjoint: false) ~> SplitDailyDataFromWeekly@(Weekly, Daily)",
						"DateLoopup aggregate(groupBy(ecdc_year_week = year+\"-W\"+lpad(week_of_year,2,\"0\")),",
						"     week_start_date = min(date),",
						"          week_end_date = max(date)) ~> AggregateDimDaate",
						"SplitDailyDataFromWeekly@Weekly, AggregateDimDaate join(reported_year_week == ecdc_year_week,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinWithDate",
						"JoinWithDate pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_year_week,",
						"          source,",
						"          week_start_date,",
						"          week_end_date),",
						"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICUadmissions per 100k']),",
						"     count = sum(value),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> PivoteWeeklyCount",
						"SplitDailyDataFromWeekly@Daily pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          source),",
						"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
						"     count = sum(value),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> PivoteDayCount",
						"PivoteWeeklyCount sort(desc(reported_year_week, true),",
						"     asc(country, true)) ~> SortWeekly",
						"PivoteDayCount sort(desc(reported_date, true),",
						"     asc(country, true)) ~> SortDaily",
						"SortWeekly select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_year_week,",
						"          reported_week_start_date = week_start_date,",
						"          reported_week_end_date = week_end_date,",
						"          Weekly_new_hospital_admissions_count = {Weekly new hospital admissions per 100k_count},",
						"          Weekly_new_ICU_admissions_count = {Weekly new ICUadmissions per 100k_count},",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWeeklyRequiredFiled",
						"SortDaily select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          hospital_occupancy_count = {Daily hospital occupancy_count},",
						"          ICU_occupancy_count = {Daily ICU occupancy_count},",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectDailyRequiredFiled",
						"SelectWeeklyRequiredFiled sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['hospital_admission_weekly.csv'],",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkWeeklyData",
						"SelectDailyRequiredFiled sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['hospital_admission_daily.csv'],",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkDailyData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_transform_population')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_population_raw",
								"type": "DatasetReference"
							},
							"name": "SourcePopulation"
						},
						{
							"dataset": {
								"referenceName": "ds_country_looup",
								"type": "DatasetReference"
							},
							"name": "SourceCountryLookup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_processed_population",
								"type": "DatasetReference"
							},
							"name": "Sinkpopulation"
						}
					],
					"transformations": [
						{
							"name": "DerivedCountryCode"
						},
						{
							"name": "JoinCountryCode"
						},
						{
							"name": "SelectRequiredFields"
						},
						{
							"name": "PivoteByAgeGroup"
						},
						{
							"name": "SelectSinkFields"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {indic_de,geo\\time} as string,",
						"          {2008 } as string,",
						"          {2009 } as string,",
						"          {2010 } as string,",
						"          {2011 } as string,",
						"          {2012 } as string,",
						"          {2013 } as string,",
						"          {2014 } as string,",
						"          {2015 } as string,",
						"          {2016 } as string,",
						"          {2017 } as string,",
						"          {2018 } as string,",
						"          {2019 } as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourcePopulation",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCountryLookup",
						"SourcePopulation derive(age_group = substringIndex(replace({indic_de,geo\\time}, \"PC_\", \"\"), \",\", 1),",
						"          country_code = substring(substringIndex(replace({indic_de,geo\\time}, \"PC_\", \"\"), \",\", -1)\r",
						", 1, 2),",
						"          percentage_2019 = regexReplace({2019 },  ':|[a-z]', '')) ~> DerivedCountryCode",
						"DerivedCountryCode, SourceCountryLookup join(country_code == country_code_2_digit,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCountryCode",
						"JoinCountryCode select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          age_group,",
						"          percentage_2019",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRequiredFields",
						"SelectRequiredFields pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population),",
						"     pivotBy(age_group, ['PC_Y0_14', 'Y15_24', 'Y25_49', 'Y50_64', 'Y65_79', 'Y80_MAX']),",
						"     group = sum(toDouble(percentage_2019)),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> PivoteByAgeGroup",
						"PivoteByAgeGroup select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          age_group_0_14 = PC_Y0_14_group,",
						"          age_group_15_24 = Y15_24_group,",
						"          age_group_25_49 = Y25_49_group,",
						"          age_group_50_64 = Y50_64_group,",
						"          age_group_65_79 = Y65_79_group,",
						"          age_group_80_MAX = Y80_MAX_group",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSinkFields",
						"SelectSinkFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Sinkpopulation"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_process_cases_and_deaths_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_transform_cases_deaths",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transform_cases_deaths",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CasesAndDeathsSource": {},
									"CountryLookup": {},
									"CasesdAndDeathsSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-11T05:12:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_process_hospital_admissions_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_transform_hospital_admission_data",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transform_hospital_admission_data",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"HospitalAdmissionDataSource": {},
									"CountryLookup": {},
									"DateLoopup": {},
									"SinkWeeklyData": {},
									"SinkDailyData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-11T05:12:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_transform_hospital_admission_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_process_population_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_transform_population",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transform_population",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourcePopulation": {},
									"SourceCountryLookup": {},
									"Sinkpopulation": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_transform_population')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_ingest_ecdc_data')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_ingest_ecdc_data",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-11-05T02:41:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_ingest_population_data')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_ingest_population_data",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/population/blobs/population_by_age.tsv.gz",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('tr_ingest_population_data_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		}
	]
}